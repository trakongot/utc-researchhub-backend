// --------------------------- CLIENT & DATASOURCE CONFIGURATION ------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------- UTIL ENUM  ------------------------

enum UserT {
  STUDENT
  FACULTY
}

enum ProjectT {
  GRADUATED // Đồ án
  RESEARCH // Nghiên cứu khoa học''
  COMPETITION // Dự án thi đấu
  COLLABORATION // Dự án hợp tác
}

enum FileT {
  PDF
  WORD
  PRESENTATION
  SPREADSHEET
  AUTOCAD
  IMAGE
  VIDEO
  CODE
  DATASET
  OTHER
}

// --------------------------- USER MANAGEMENT ------------------------

enum StudentStatusT {
  ACTIVE
  INACTIVE
  GRADUATED
  DROPPED_OUT
  ON_LEAVE
}

enum GenderT {
  MALE
  FEMALE
  OTHER
}

model Student {
  id                   String                 @id @default(cuid()) @map("id") // ID duy nhất của sinh viên
  studentCode          String                 @unique @map("student_code") // Mã sinh viên
  majorCode            String?                @map("major_code") // Mã ngành của sinh viên
  programCode          String?                @map("program_code") // Mã chương trình học
  bio                  String?                @map("bio") // Giới thiệu bản thân
  fullName             String                 @map("full_name") @db.VarChar(255) // Họ và tên đầy đủ
  email                String                 @unique @map("email") @db.VarChar(255) // Email
  password             String                 @map("password") // Mật khẩu
  phone                String?                @map("phone") @db.VarChar(20) // Số điện thoại
  dateOfBirth          DateTime?              @map("date_of_birth") // Ngày sinh
  gender               GenderT?               @map("gender") // Giới tính
  admissionYear        Int?                   @map("admission_year") // Năm nhập học
  graduationYear       Int?                   @map("graduation_year") // Năm tốt nghiệp dự kiến
  currentGpa           Float?                 @map("current_gpa") // Điểm trung bình tích lũy (GPA)
  creditsEarned        Int?                   @map("credits_earned") // Số tín chỉ tích lũy
  status               StudentStatusT         @default(ACTIVE) @map("status") // Trạng thái sinh viên
  createdAt            DateTime               @default(now()) @map("created_at") // Ngày tạo hồ sơ
  updatedAt            DateTime               @updatedAt @map("updated_at") // Ngày cập nhật hồ sơ gần nhất
  profilePicture       String?                @map("profile_pic") // Ảnh đại diện
  lastLogin            DateTime?              @map("last_login") // Lần đăng nhập gần nhất
  isOnline             Boolean                @default(false) @map("is_online") // Trạng thái trực tuyến
  refreshToken         String?                @map("refresh_token")
  departmentId         String?                @map("department_id") // Mã khoa của sinh viên
  Department           Department?            @relation(fields: [departmentId], references: [id])
  ProjectComment       ProjectComment[]       @relation
  AuditLog             AuditLog[]             @relation
  ProposalOutline      ProposalOutline[]      @relation
  ProposedProject      ProposedProject[]      @relation("ProposedProjectCreatedByStudent")
  StudentSelection     StudentSelection[]     @relation
  ProjectAllocation    ProjectAllocation[]    @relation
  ProjectFinalReport   ProjectFinalReport[]   @relation
  ProjectReportFile    ProjectReportFile[]    @relation
  ProjectReportComment ProjectReportComment[] @relation
  NotificationsSent    Notification[]         @relation("StudentSentNotifications")
  Notification         Notification[]         @relation("StudentNotifications")

  @@index([studentCode, status, departmentId])
  @@index([email, status])
  @@index([departmentId, status])
  @@map("student")
}

enum FacultyStatusT {
  ACTIVE
  INACTIVE
  RETIRED
  RESIGNED
  ON_LEAVE
}

model Faculty {
  id             String         @id @map("id")
  fullName       String         @map("full_name") @db.VarChar(255)
  facultyCode    String?        @unique @map("faculty_member_code") @db.VarChar(50)
  bio            String?        @map("bio")
  email          String         @unique @map("email") @db.VarChar(255)
  password       String         @map("password")
  status         FacultyStatusT @default(ACTIVE) @map("status")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  // isDeleted      Boolean        @default(false) @map("is_deleted")
  profilePicture String?        @map("profile_picture")
  lastLogin      DateTime?      @map("last_login")
  isOnline       Boolean        @default(false) @map("is_online")
  phoneNumber    String?        @map("phone_number") // Số điện thoại
  rank           String?        @map("rank") // Học hàm/học vị
  departmentId   String?        @map("department_id")
  refreshToken   String?        @map("refresh_token")

  Department               Department?            @relation(fields: [departmentId], references: [id])
  DefenseMember            DefenseMember[]        @relation
  ProjectEvaluation        ProjectEvaluation[]    @relation
  FacultyRole              FacultyRole[]          @relation
  EvaluationCriteria       EvaluationCriteria[]   @relation
  ProjectComment           ProjectComment[]       @relation
  Project                  Project[]              @relation
  AuditLog                 AuditLog[]             @relation
  ProposalOutline          ProposalOutline[]      @relation
  ProposedProjectCreated   ProposedProject[]      @relation("ProposedProjectCreatedByFaculty")
  ProposedProjectApproved  ProposedProject[]      @relation("ProposedProjectApprovedByFaculty")
  DefenseCommittee         DefenseCommittee[]     @relation
  LecturerSelection        LecturerSelection[]    @relation
  ProjectFinalReport       ProjectFinalReport[]   @relation
  ProjectReportFile        ProjectReportFile[]    @relation
  ProjectReportComment     ProjectReportComment[] @relation
  ProjectAllocationCreated ProjectAllocation[]    @relation("ProjectAllocationCreatedByFaculty")
  LecturerRelation         ProjectAllocation[]    @relation("ProjectAllocationSelectedByLecturer")
  StudentSelection         StudentSelection[]     @relation("LecturerSelectedByStudent")
  ApprovedStudentSelection StudentSelection[]     @relation("ApprovedStudentSelection")
  ProjectCriteriaScore     ProjectCriteriaScore[]
  NotificationsReceived    Notification[]         @relation("FacultyNotifications")
  NotificationsSent        Notification[]         @relation("FacultySentNotifications")

  @@index([facultyCode, status, departmentId])
  @@index([email, status])
  @@index([departmentId, status])
  @@map("faculty")
}

enum FacultyRoleT {
  ADMIN
  DEAN
  DEPARTMENT_HEAD
  SECRETARY
  LECTURER
  ADVISOR
}

model FacultyRole {
  id        String       @id @map("id")
  facultyId String       @map("faculty_id")
  role      FacultyRoleT @map("role")

  Faculty Faculty @relation(fields: [facultyId], references: [id])

  @@unique([facultyId, role])
  @@map("faculty_role")
}

// --------------------------- ACADEMIC MANAGEMENT ------------------------

enum DepartmentStatusT {
  ACTIVE
  INACTIVE
}

model Department {
  id                 String            @id @default(uuid()) @map("id")
  departmentCode     String?           @map("department_code")
  name               String            @unique @map("name") @db.VarChar(255)
  description        String?           @map("description")
  status             DepartmentStatusT @default(ACTIVE) @map("status")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  parentDepartmentId String?           @map("parent_department_id")

  ParentDepartment    Department?           @relation("SubDepartment", fields: [parentDepartmentId], references: [id]) // Quan hệ tự tham chiếu
  SubDepartment       Department[]          @relation("SubDepartment") // Các khoa con
  Student             Student[]             @relation
  Faculty             Faculty[]             @relation
  Project             Project[]             @relation
  AuditLog            AuditLog[]            @relation
  FieldPoolDepartment FieldPoolDepartment[] @relation

  @@map("department")
}

enum FieldPoolStatusT {
  OPEN
  CLOSED
  HIDDEN
}

model FieldPool {
  id                   String           @id @default(uuid()) @map("id")
  name                 String           @unique @map("name")
  description          String?          @map("description")
  longDescription      String?          @map("long_description")
  status               FieldPoolStatusT @default(CLOSED) @map("status")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  registrationDeadline DateTime?        @map("registration_deadline")

  FieldPoolDepartment FieldPoolDepartment[] @relation
  LecturerSelection   LecturerSelection[]   @relation
  FieldPoolDomain     FieldPoolDomain[]     @relation
  StudentSelection    StudentSelection[]    @relation
  Project             Project[]             @relation
  ProposedProject     ProposedProject[]     @relation

  @@map("field_pool")
}

model FieldPoolDepartment {
  fieldPoolId  String @map("field_pool_id")
  departmentId String @map("department_id")
  // createdAt    DateTime @default(now()) @map("created_at")
  // updatedAt    DateTime @updatedAt @map("updated_at")

  Department Department @relation(fields: [departmentId], references: [id])
  FieldPool  FieldPool  @relation(fields: [fieldPoolId], references: [id])

  @@id([fieldPoolId, departmentId])
  @@map("field_pool_department")
}

model FieldPoolDomain {
  fieldPoolId String @map("field_pool_id")
  domainId    String @map("domain_id")
  // createdAt   DateTime @default(now()) @map("created_at")
  // updatedAt   DateTime @updatedAt @map("updated_at")

  Domain    Domain    @relation(fields: [domainId], references: [id])
  FieldPool FieldPool @relation(fields: [fieldPoolId], references: [id])

  @@id([fieldPoolId, domainId])
  @@map("field_pool_domain")
}

model Domain {
  id          String  @id @default(uuid())
  name        String  @unique @map("name") // Tên Domain (ví dụ: "AI", "Blockchain")
  description String? @map("description")
  // createdAt   DateTime @default(now()) @map("created_at")
  // updatedAt   DateTime @updatedAt @map("updated_at")

  FieldPoolDomain FieldPoolDomain[] @relation
  ProjectDomain   ProjectDomain[]

  @@map("domain")
}

// --------------------------- REGISTER MANAGEMENT ------------------------

enum LecturerSelectionStatusT {
  REQUESTED_CHANGES
  PENDING
  APPROVED
  REJECTED
  CONFIRMED
}

model LecturerSelection {
  id              String                   @id @default(uuid()) @map("id")
  priority        Int                      @default(1) // Thứ tự nguyện vọng (1 là cao nhất)
  topicTitle      String                   @map("topic_title") // Tiêu đề đề tài
  description     String?                  @map("description")
  capacity        Int                      @default(1) @map("capacity")
  currentCapacity Int                      @default(0) @map("current_capacity")
  status          LecturerSelectionStatusT @default(PENDING) @map("status")
  isActive        Boolean                  @default(true) @map("is_active")
  lecturerId      String                   @map("lecturer_id")
  fieldPoolId     String?                  @map("field_pool_id")
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt @map("updated_at")

  Lecturer  Faculty    @relation(fields: [lecturerId], references: [id])
  FieldPool FieldPool? @relation(fields: [fieldPoolId], references: [id])

  @@unique([lecturerId, topicTitle])
  @@map("lecturer_selection")
}

enum StudentSelectionStatusT {
  REQUESTED_CHANGES
  PENDING
  APPROVED
  REJECTED
  CONFIRMED
}

model StudentSelection {
  id             String                  @id @default(uuid()) @map("id")
  priority       Int                     @default(1) @map("priority") // Thứ tự nguyện vọng (1 là cao nhất) 
  topicTitle     String?                 @map("topicTitle")
  description    String?                 @map("description")
  status         StudentSelectionStatusT @default(PENDING) @map("status")
  createdAt      DateTime                @default(now()) @map("created_at")
  updatedAt      DateTime                @updatedAt @map("updated_at")
  studentId      String                  @map("student_id")
  lecturerId     String?                 @map("faculty_member_id")
  fieldPoolId    String?                 @map("field_pool_id")
  preferredAt    DateTime                @default(now()) @map("preferred_at")
  approvedById   String?                 @map("approved_by_id")
  approvedByType UserT?                  @map("approved_by_type")

  Lecturer   Faculty?   @relation("LecturerSelectedByStudent", fields: [lecturerId], references: [id])
  Student    Student    @relation(fields: [studentId], references: [id])
  FieldPool  FieldPool? @relation(fields: [fieldPoolId], references: [id])
  ApprovedBy Faculty?   @relation("ApprovedStudentSelection", fields: [approvedById], references: [id])

  @@unique([studentId, lecturerId, priority])
  @@index([studentId, priority])
  @@index([lecturerId, createdAt, status])
  @@map("student_selection")
}

model ProjectAllocation {
  id          String   @id @default(uuid())
  topicTitle  String   @map("topic_title")
  allocatedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studentId   String   @map("student_id")
  createdById String   @map("created_by_id")
  lecturerId  String   @map("lecturer_id")

  Student          Student @relation(fields: [studentId], references: [id])
  Lecturer         Faculty @relation("ProjectAllocationSelectedByLecturer", fields: [lecturerId], references: [id])
  CreatedByFaculty Faculty @relation("ProjectAllocationCreatedByFaculty", fields: [createdById], references: [id])

  @@unique([studentId, lecturerId, topicTitle])
  @@index([studentId, lecturerId, allocatedAt])
  @@map("project_allocation")
}

// --------------------------- REGISTER PROJECT ------------------------

enum ProposedProjectStatusT {
  PENDING_ADVISOR
  REQUESTED_CHANGES_ADVISOR
  REJECTED_BY_ADVISOR
  ADVISOR_APPROVED
  REQUESTED_CHANGES_HEAD
  REJECTED_BY_HEAD
  APPROVED_BY_HEAD
  CONFIRMED_BY_HEAD
  CONFIRMED_BY_ADVISOR
}

model ProposedProject {
  id                String                 @id
  title             String                 @map("title")
  description       String?                @map("description")
  status            ProposedProjectStatusT @default(PENDING_ADVISOR) @map("status")
  createdAt         DateTime               @default(now()) @map("created_at")
  updatedAt         DateTime               @updatedAt @map("updated_at")
  proposalDeadline  DateTime?              @map("proposal_deadline")
  topicLockDate     DateTime?              @map("topic_lock_date")
  approvedAt        DateTime?              @map("approved_at")
  approvedById      String?                @map("approved_by_id")
  proposalOutlineId String?                @map("proposal_outline_id")
  createdById       String                 @map("created_by_id")
  creatorType       UserT                  @map("creator_type")
  fieldPoolId       String?                @map("field_pool_id")

  CreatedByStudent       Student?                 @relation("ProposedProjectCreatedByStudent", fields: [createdById], references: [id], map: "fk_proposed_project_student")
  CreatedByfaculty       Faculty?                 @relation("ProposedProjectCreatedByFaculty", fields: [createdById], references: [id], map: "fk_proposed_project_faculty")
  Members                ProjectMember[]          @relation()
  ProposalOutline        ProposalOutline?         @relation(fields: [proposalOutlineId], references: [id])
  ApprovedBy             Faculty?                 @relation("ProposedProjectApprovedByFaculty", fields: [approvedById], references: [id])
  ProposedProjectComment ProposedProjectComment[]
  FieldPool              FieldPool?               @relation(fields: [fieldPoolId], references: [id])

  @@map("proposed_project")
}

model ProposedProjectComment {
  id          String   @id
  commenterId String?  @map("commenter_id")
  role        UserT    @map("role")
  content     String   @map("content")
  createdAt   DateTime @default(now()) @map("created_at")

  proposedProjectId String          @map("project_darf_id")
  Propose           ProposedProject @relation(fields: [proposedProjectId], references: [id])

  @@map("proposed_project_comment")
}

enum ProposalStatusT {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

model ProposalOutline {
  id              String          @id
  introduction    String          @map("introduction") // Giới thiệu đề tài
  objectives      String          @map("objectives") // Mục tiêu nghiên cứu
  methodology     String          @map("methodology") // Phương pháp nghiên cứu
  expectedResults String          @map("expected_results") // Kết quả mong đợi
  fileUrl         String          @map("file_url")
  fileSize        Int?            @map("file_size")
  status          ProposalStatusT @default(PENDING_REVIEW) @map("status")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  createdById     String          @map("created_by_id")
  creatorType     UserT           @map("creator_type")

  CreatedByStudent Student?          @relation(fields: [createdById], references: [id], map: "fk_proposal_student")
  CreatedByFaculty Faculty?          @relation(fields: [createdById], references: [id], map: "fk_proposal_faculty")
  ProposedProject  ProposedProject[]
  Project          Project[]

  @@map("proposal_outline")
}

// ----------------------- MEMBER DRAFT TOPIC, PROJECT MANAGEMENT ------------------------

enum ProjectMemberStatusT {
  PENDING
  APPROVED
  LOCKED
}

model ProjectMember {
  id          String               @id
  projectId   String               @map("topic_id")
  projectType ProjectT             @map("topic_type")
  memberId    String               @map("member_id")
  role        UserT                @map("role")
  descRole    String?              @map("desc_role")
  status      ProjectMemberStatusT @default(PENDING) @map("status")
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")

  Project         Project?         @relation(fields: [projectId], references: [id], map: "fk_topic_member_project")
  ProposedProject ProposedProject? @relation(fields: [projectId], references: [id], map: "fk_topic_member_proposed_project")

  @@unique([projectId, memberId, projectType])
  @@index([projectId, memberId])
  @@map("project_member")
}

// --------------------------- PROJECT MANAGEMENT ------------------------

enum ProjectStatusT {
  IN_PROGRESS
  WAITING_FOR_EVALUATION
  COMPLETED
}

model Project {
  id                String         @id
  type              ProjectT       @map("type")
  title             String         @map("title")
  description       String?        @map("description") // Mô tả đề tài
  field             String         @map("field") // Lĩnh vực/ngành
  status            ProjectStatusT @default(IN_PROGRESS) @map("status")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  proposalDeadline  DateTime?      @map("proposal_deadline") // Hạn chót nộp đề cương
  topicLockDate     DateTime?      @map("topic_lock_date") // Thời gian khóa đề tài
  customFields      Json?          @map("custom_fields") // Các trường dữ liệu tùy chỉnh
  proposalOutlineId String?        @map("proposal_outline_id")

  approvedById   String  @map("approved_by_id")
  approvedByType UserT   @map("approved_by_type")
  departmentId   String? @map("department_id")

  Department         Department?          @relation(fields: [departmentId], references: [id])
  ApprovedBy         Faculty?             @relation(fields: [approvedById], references: [id])
  Members            ProjectMember[]      @relation()
  ProposalOutline    ProposalOutline?     @relation(fields: [proposalOutlineId], references: [id])
  ProjectComment     ProjectComment[]     @relation
  ProjectEvaluation  ProjectEvaluation[]  @relation
  DefenseCommittee   DefenseCommittee?    @relation
  ProjectFinalReport ProjectFinalReport[] @relation
  fieldPoolId        String?              @map("field_pool_id")
  FieldPool          FieldPool?           @relation(fields: [fieldPoolId], references: [id])
  ProjectDomain      ProjectDomain[]

  @@index([type, status, departmentId, createdAt])
  @@index([approvedById, status, createdAt])
  @@index([proposalOutlineId, status])
  @@index([departmentId, type, status])
  @@map("project")
}

enum MemberStatusT {
  PENDING // Chưa duyệt
  APPROVED // Đã duyệt
  LOCKED // Bị khóa (Không thể thay đổi)
}

model ProjectComment {
  id          String   @id
  content     String   @map("content")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  projectId   String   @map("project_id")
  commenterId String   @map("commenter_id")
  role        UserT    @map("role")

  Project Project  @relation(fields: [projectId], references: [id])
  Student Student? @relation(fields: [commenterId], references: [id], map: "fk_project_comment_student")
  Faculty Faculty? @relation(fields: [commenterId], references: [id], map: "fk_project_comment_faculty")

  @@index([projectId, createdAt])
  @@index([commenterId, role])
  @@map("project_comment")
}

model ProjectDomain {
  id        String @id
  projectId String @map("project_id")
  domainId  String @map("domain_id")

  Project Project @relation(fields: [projectId], references: [id])
  Domain  Domain  @relation(fields: [domainId], references: [id])

  @@index([projectId])
  @@map("project_keyword")
}

// ------------------------- TOPIC DEFENSE MANAGEMENT ------------------------

model ProjectFinalReport {
  id         String  @id
  project    Project @relation(fields: [projectId], references: [id])
  projectId  String  @map("project_id")
  mainReport String  @map("main_report") // Đường dẫn file PDF báo cáo chính
  fileSize   Int?    @map("file_size")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  uploadedById   String? @map("uploaded_by_id")
  uploadedByType UserT?  @map("uploaded_by_type")

  UploadedByStudent    Student?               @relation(fields: [uploadedById], references: [id], map: "fk_project_final_report_student")
  UploadedByLecturer   Faculty?               @relation(fields: [uploadedById], references: [id], map: "fk_project_final_report_faculty")
  ProjectReportComment ProjectReportComment[] @relation
  RelatedFile          ProjectReportFile[]    @relation

  @@index([projectId])
  @@map("project_final_report")
}

enum ProjectReportFileStatusT {
  PENDING
  APPROVED
  REJECTED
}

model ProjectReportFile {
  id            String                   @id @default(uuid()) // Thêm default
  finalReport   ProjectFinalReport       @relation(fields: [finalReportId], references: [id])
  finalReportId String                   @map("final_report_id")
  fileType      FileT                    @map("file_type")
  fileUrl       String                   @map("file_url")
  fileSize      Int?                     @map("file_size")
  isArchived    Boolean                  @default(false) @map("is_archived") // Thêm default
  status        ProjectReportFileStatusT @default(PENDING) @map("status")
  description   String?                  @map("description") // Mô tả file

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  uploadedById   String? @map("uploaded_by_id")
  uploadedByType UserT?  @map("uploaded_by_type")

  UploadedByStudent  Student? @relation(fields: [uploadedById], references: [id], map: "fk_project_report_file_student", onDelete: SetNull, onUpdate: Cascade) // Thêm onDelete, onUpdate
  UploadedByLecturer Faculty? @relation(fields: [uploadedById], references: [id], map: "fk_project_report_file_faculty", onDelete: SetNull, onUpdate: Cascade) // Thêm onDelete, onUpdate

  @@index([finalReportId])
  @@index([uploadedById, uploadedByType])
  @@map("project_report_file")
}

model ProjectReportComment {
  id            String             @id
  finalReport   ProjectFinalReport @relation(fields: [finalReportId], references: [id])
  finalReportId String             @map("final_report_id")
  userId        String             @map("user_id")
  role          UserT              @map("role")
  content       String             @map("content")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  CommentedByStudent Student? @relation(fields: [userId], references: [id], map: "fk_report_comment_student")
  CommentedByFaculty Faculty? @relation(fields: [userId], references: [id], map: "fk_report_comment_faculty")

  @@index([finalReportId])
  @@map("project_report_comment")
}

enum DefenseCommitteeStatusT {
  PREPARING
  SCHEDULED
  ONGOING
  FINISHED
}

model DefenseCommittee {
  id          String                  @id
  Project     Project                 @relation(fields: [ProjectId], references: [id])
  ProjectId   String                  @unique @map("project_id")
  name        String                  @map("name")
  description String?                 @map("description")
  defenseDate DateTime                @map("defense_date")
  status      DefenseCommitteeStatusT @default(SCHEDULED) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  createdById String @map("created_by_id")

  Member           DefenseMember[] @relation
  CreatedByFaculty Faculty         @relation(fields: [createdById], references: [id])

  @@index([defenseDate])
  @@index([ProjectId])
  @@map("defense_committee")
}

enum DefenseCommitteeRoleT {
  CHAIRMAN // Trưởng bộ môn - Chủ tịch hội đồng
  DEAN // Trưởng khoa
  SECRETARY // Thư ký hội đồng
  REVIEWER // Giảng viên phản biện
  MEMBER // Thành viên hội đồng khác
}

model DefenseMember {
  id                 String                @id
  role               DefenseCommitteeRoleT @map("role")
  defenseCommitteeId String                @map("defense_committee_id")
  facultyMemberId    String                @map("faculty_member_id")

  DefenseCommittee DefenseCommittee @relation(fields: [defenseCommitteeId], references: [id])
  FacultyMember    Faculty          @relation(fields: [facultyMemberId], references: [id])

  @@unique([defenseCommitteeId])
  @@unique([facultyMemberId])
  @@map("defense_committee_member")
}

// --------------------------- EVALUATION RESULT PROJECT ------------------------
enum ProjectEvaluationStatusT {
  PENDING // Chưa chấm điểm
  IN_PROGRESS // Đang chấm
  COMPLETED // Đã hoàn thành
}

model ProjectEvaluation {
  id                    String                   @id @default(uuid()) // Thay đổi default nếu cần
  projectId             String                   @unique @map("project_id")
  // finalScore được tính toán dựa trên ProjectCriteriaScore theo trọng số và có thể cả điểm của GVHD.
  // Logic tính toán nằm ở tầng service.
  finalScore            Float?                   @map("final_score")
  status                ProjectEvaluationStatusT @default(PENDING) @map("status") // Thêm default
  evaluatedById         String?                  @map("evaluated_by_id") // ID của người đánh giá chính (có thể là GVHD hoặc thư ký)
  // teacherScore là điểm do Giảng viên hướng dẫn (Advisor) chấm.
  teacherScore          Float?                   @map("teacher_score")
  committeeAverageScore Float?                   @map("committee_average_score") // Có thể bỏ nếu finalScore đã đủ? Xem xét lại.
  teacherWeight         Float?                   @default(0.5) @map("teacher_weight")
  committeeWeight       Float?                   @default(0.5) @map("committee_weight")
  createdAt             DateTime                 @default(now()) @map("created_at")
  updatedAt             DateTime                 @updatedAt @map("updated_at")

  // ProjectEvaluationScore đã bị bỏ. Điểm chi tiết xem ở ProjectCriteriaScore.
  CriteriaScores     ProjectCriteriaScore[] @relation
  Project            Project                @relation(fields: [projectId], references: [id])
  EvaluatedByFaculty Faculty?               @relation(fields: [evaluatedById], references: [id])

  @@map("project_evaluation")
}

model ProjectCriteriaScore {
  id            String  @id @default(uuid()) // Thay đổi default nếu cần
  projectEvalId String  @map("project_eval_id")
  criteriaId    String  @map("criteria_id")
  evaluatorId   String  @map("evaluator_id") // ID của người chấm điểm tiêu chí này (GVHD hoặc thành viên hội đồng)
  score         Float   @default(0.0) @map("score")
  comment       String? @map("comment")

  EvaluationCriteria EvaluationCriteria @relation(fields: [criteriaId], references: [id])
  ProjectEvaluation  ProjectEvaluation  @relation(fields: [projectEvalId], references: [id])
  Evaluator          Faculty            @relation(fields: [evaluatorId], references: [id]) // Người đánh giá luôn là Faculty

  @@unique([projectEvalId, criteriaId, evaluatorId]) // Đảm bảo mỗi người chỉ chấm 1 lần cho 1 tiêu chí
  @@map("project_criteria_score")
}

model EvaluationCriteria {
  id          String   @id @default(uuid()) // Thay đổi default nếu cần
  name        String   @map("name") // Tên tiêu chí
  description String?  @map("description") // Mô tả tiêu chí
  weight      Float    @default(1.0) @map("weight") // Trọng số tiêu chí
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdById String   @map("created_by_id") // ID của người tạo tiêu chí

  CreatedByFaculty     Faculty                @relation(fields: [createdById], references: [id])
  ProjectCriteriaScore ProjectCriteriaScore[] @relation

  @@map("evaluation_criteria")
}

// --------------------------- LOG SYSTEM ------------------------

model AuditLog {
  id         String   @id @default(uuid()) // Thay đổi default nếu cần
  entityType String   @map("entity_type") // Ví dụ: "PROJECT", "TASK", "SYSTEM_CONFIG", "FILE_UPLOAD"
  entityId   String?  @map("entity_id") // ID của đối tượng liên quan (Project, Task,...)
  action     String   @map("action") // "CREATE", "UPDATE", "APPROVE", "SUBMIT", "DELETE", "UPLOAD"
  oldValue   String?  @map("old_value") // Giá trị trước khi thay đổi
  newValue   String?  @map("new_value") // Giá trị sau khi thay đổi
  metadata   Json?    @map("metadata") // Lưu thông tin bổ sung (VD: chi tiết thay đổi)
  createdAt  DateTime @default(now()) @map("created_at")

  departmentId String?     @map("department_id")
  department   Department? @relation(fields: [departmentId], references: [id])

  // userId và userType xác định người thực hiện hành động.
  // Quan trọng: Logic code phải kiểm tra sự tồn tại của user trước khi tạo log.
  userId   String @map("user_id")
  userType UserT  @map("user_type")

  CreatedByStudent Student? @relation(fields: [userId], references: [id], map: "fk_log_student", onDelete: NoAction, onUpdate: NoAction) // Thêm onDelete, onUpdate để rõ ràng
  CreatedByFaculty Faculty? @relation(fields: [userId], references: [id], map: "fk_log_faculty", onDelete: NoAction, onUpdate: NoAction) // Thêm onDelete, onUpdate để rõ ràng

  @@index([entityType, entityId, createdAt])
  @@index([userId, userType, createdAt])
  @@index([action, createdAt])
  @@map("audit_log")
}

// --------------------------- NOTIFICATION SYSTEM ------------------------

enum NotificationType {
  INFO // Thông báo chung
  WARNING // Cảnh báo
  DEADLINE // Nhắc nhở hạn chót
  TASK_ASSIGNED // Giao nhiệm vụ
  COMMENT_MENTION // Được nhắc đến trong bình luận
  PROPOSAL_STATUS_CHANGE // Thay đổi trạng thái đề xuất
  OUTLINE_STATUS_CHANGE // Thay đổi trạng thái đề cương
  REVISION_REQUEST // Yêu cầu chỉnh sửa (đề cương, báo cáo)
  GRADE_AVAILABLE // Có điểm mới
  MEETING_SCHEDULED // Lịch họp
  SYSTEM_UPDATE // Cập nhật hệ thống
}

model Notification {
  id                String           @id @default(uuid())
  recipientId       String           @map("recipient_id")
  recipientType     UserT            @map("recipient_type")
  senderId          String?          @map("sender_id") // Có thể là system (null) hoặc user
  senderType        UserT?           @map("sender_type")
  type              NotificationType @map("type")
  title             String           @map("title")
  message           String           @map("message")
  relatedEntityType String?          @map("related_entity_type") // Ví dụ: "PROJECT", "PROPOSAL_OUTLINE", "PROJECT_REPORT"
  relatedEntityId   String?          @map("related_entity_id") // ID của entity liên quan
  isRead            Boolean          @default(false) @map("is_read")
  createdAt         DateTime         @default(now()) @map("created_at")

  RecipientStudent Student? @relation("StudentNotifications", fields: [recipientId], references: [id], onDelete: Cascade, map: "notification_recipient_student_fkey") // Xóa noti nếu user bị xóa
  RecipientFaculty Faculty? @relation("FacultyNotifications", fields: [recipientId], references: [id], onDelete: Cascade, map: "notification_recipient_faculty_fkey") // Xóa noti nếu user bị xóa
  // Quan hệ cho người gửi (tùy chọn)
  SenderStudent    Student? @relation("StudentSentNotifications", fields: [senderId], references: [id], onDelete: SetNull, map: "notification_sender_student_fkey") // Giữ lại noti nếu người gửi bị xóa
  SenderFaculty    Faculty? @relation("FacultySentNotifications", fields: [senderId], references: [id], onDelete: SetNull, map: "notification_sender_faculty_fkey") // Giữ lại noti nếu người gửi bị xóa

  @@index([recipientId, recipientType, isRead, createdAt])
  @@map("notification")
}
