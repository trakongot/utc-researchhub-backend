// --------------------------- CLIENT & DATASOURCE CONFIGURATION ------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------- UTIL ENUM  ------------------------

enum UserT {
  STUDENT
  FACULTY
}

enum ProjectT {
  GRADUATED // Luận văn tốt nghiệp
  RESEARCH // Nghiên cứu khoa học
  COMPETITION // Dự án thi đấu
  COLLABORATION // Dự án hợp tác
}

// --------------------------- USER MANAGEMENT ------------------------

enum StudentStatusT {
  ACTIVE
  INACTIVE
  GRADUATED
  DROPPED_OUT
  ON_LEAVE
}

enum GenderT {
  MALE
  FEMALE
  OTHER
}

model Student {
  id             String         @id @default(cuid()) @map("id")
  studentCode    String         @unique @map("student_code")
  majorCode      String?        @map("major_code")
  programCode    String?        @map("program_code")
  bio            String?        @map("bio")
  fullName       String         @map("full_name") @db.VarChar(255)
  email          String         @unique @map("email") @db.VarChar(255)
  password       String         @map("password")
  phone          String?        @map("phone") @db.VarChar(20)
  dateOfBirth    DateTime?      @map("date_of_birth")
  gender         GenderT?       @map("gender")
  admissionYear  Int?           @map("admission_year")
  graduationYear Int?           @map("graduation_year")
  currentGpa     Float?         @map("current_gpa")
  creditsEarned  Int?           @map("credits_earned")
  status         StudentStatusT @default(ACTIVE) @map("status")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  profilePicture String?        @map("profile_pic")
  lastLogin      DateTime?      @map("last_login")
  isOnline       Boolean        @default(false) @map("is_online")
  refreshToken   String?        @map("refresh_token")
  departmentId   String?        @map("department_id")

  Department              Department?              @relation(fields: [departmentId], references: [id])
  ProjectComments         ProjectComment[]         @relation("CommenterStudent")
  AuditLogs               AuditLog[]               @relation("ActionByStudent")
  CreatedProposedProjects ProposedProject[]        @relation("ProposedProjectCreatedByStudent")
  StudentSelections       StudentSelection[]       @relation
  ProjectAllocations      ProjectAllocation[]      @relation
  ProjectFinalReports     ProjectFinalReport[]     @relation("ReportByStudent")
  ProjectReportComments   ProjectReportComment[]   @relation("ReportCommenterStudent")
  NotificationsSent       Notification[]           @relation("StudentSentNotifications")
  NotificationsReceived   Notification[]           @relation("StudentNotifications")
  UploadedFiles           File[]                   @relation("UploadedByStudent")
  ProjectMemberships      ProjectMember[]          @relation("MemberStudent")
  ProposedProjectComment  ProposedProjectComment[]
  ProposedProjectMember   ProposedProjectMember[]

  @@index([studentCode, status, departmentId])
  @@index([email, status])
  @@index([departmentId, status])
  @@map("student")
}

enum FacultyStatusT {
  ACTIVE
  INACTIVE
  RETIRED
  RESIGNED
  ON_LEAVE
}

model Faculty {
  id             String         @id @map("id")
  fullName       String         @map("full_name") @db.VarChar(255)
  facultyCode    String?        @unique @map("faculty_member_code") @db.VarChar(50)
  bio            String?        @map("bio")
  email          String         @unique @map("email") @db.VarChar(255)
  password       String         @map("password")
  status         FacultyStatusT @default(ACTIVE) @map("status")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  profilePicture String?        @map("profile_picture")
  lastLogin      DateTime?      @map("last_login")
  isOnline       Boolean        @default(false) @map("is_online")
  phoneNumber    String?        @map("phone_number")
  rank           String?        @map("rank")
  departmentId   String?        @map("department_id")
  refreshToken   String?        @map("refresh_token")

  Department                 Department?              @relation(fields: [departmentId], references: [id])
  DefenseMembers             DefenseMember[]          @relation
  ProjectEvaluations         ProjectEvaluation[]      @relation("EvaluatedByFaculty")
  FacultyRoles               FacultyRole[]            @relation
  CreatedEvaluationCriteria  EvaluationCriteria[]     @relation
  ProjectComments            ProjectComment[]         @relation("CommenterFaculty")
  ApprovedProjects           Project[]                @relation("ApprovedByFaculty")
  AuditLogs                  AuditLog[]               @relation("ActionByFaculty")
  CreatedProposedProjects    ProposedProject[]        @relation("ProposedProjectCreatedByFaculty")
  ApprovedProposedProjects   ProposedProject[]        @relation("ProposedProjectApprovedByFaculty")
  CreatedDefenseCommittees   DefenseCommittee[]       @relation("CreatedByFaculty")
  LecturerSelections         LecturerSelection[]      @relation
  ProjectFinalReports        ProjectFinalReport[]     @relation("ReportByFaculty")
  ProjectReportComments      ProjectReportComment[]   @relation("ReportCommenterFaculty")
  CreatedProjectAllocations  ProjectAllocation[]      @relation("ProjectAllocationCreatedByFaculty")
  LecturerProjectAllocations ProjectAllocation[]      @relation("ProjectAllocationSelectedByLecturer")
  PreferredByStudents        StudentSelection[]       @relation("LecturerSelectedByStudent")
  ApprovedStudentSelections  StudentSelection[]       @relation("ApprovedStudentSelection")
  GivenProjectCriteriaScores ProjectCriteriaScore[]   @relation
  NotificationsReceived      Notification[]           @relation("FacultyNotifications")
  NotificationsSent          Notification[]           @relation("FacultySentNotifications")
  UploadedFiles              File[]                   @relation("UploadedByFaculty")
  ProjectMemberships         ProjectMember[]          @relation("MemberFaculty")
  ProposedProjectComment     ProposedProjectComment[]
  ProposedProjectMember      ProposedProjectMember[]

  @@index([facultyCode, status, departmentId])
  @@index([email, status])
  @@index([departmentId, status])
  @@map("faculty")
}

enum FacultyRoleT {
  ADMIN
  DEAN
  DEPARTMENT_HEAD
  SECRETARY
  LECTURER
  ADVISOR
  REVIEWER
}

model FacultyRole {
  id        String       @id @map("id")
  facultyId String       @map("faculty_id")
  role      FacultyRoleT @map("role")

  Faculty Faculty @relation(fields: [facultyId], references: [id])

  @@unique([facultyId, role])
  @@map("faculty_role")
}

// --------------------------- ACADEMIC MANAGEMENT ------------------------

enum DepartmentStatusT {
  ACTIVE
  INACTIVE
}

model Department {
  id                 String            @id @default(uuid()) @map("id")
  departmentCode     String?           @map("department_code")
  name               String            @unique @map("name") @db.VarChar(255)
  description        String?           @map("description")
  status             DepartmentStatusT @default(ACTIVE) @map("status")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  parentDepartmentId String?           @map("parent_department_id")

  ParentDepartment     Department?           @relation("SubDepartment", fields: [parentDepartmentId], references: [id])
  SubDepartments       Department[]          @relation("SubDepartment")
  Students             Student[]             @relation
  Faculties            Faculty[]             @relation
  Projects             Project[]             @relation
  AuditLogs            AuditLog[]            @relation
  FieldPoolDepartments FieldPoolDepartment[] @relation

  @@map("department")
}

enum FieldPoolStatusT {
  OPEN
  CLOSED
  HIDDEN
}

model FieldPool {
  id                   String           @id @default(uuid()) @map("id")
  name                 String           @unique @map("name")
  description          String?          @map("description")
  longDescription      String?          @map("long_description")
  status               FieldPoolStatusT @default(CLOSED) @map("status")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  registrationDeadline DateTime?        @map("registration_deadline")

  FieldPoolDepartments FieldPoolDepartment[] @relation
  LecturerSelections   LecturerSelection[]   @relation
  FieldPoolDomains     FieldPoolDomain[]     @relation
  StudentSelections    StudentSelection[]    @relation
  Projects             Project[]             @relation
  ProposedProjects     ProposedProject[]     @relation

  @@map("field_pool")
}

model FieldPoolDepartment {
  fieldPoolId  String @map("field_pool_id")
  departmentId String @map("department_id")

  Department Department @relation(fields: [departmentId], references: [id])
  FieldPool  FieldPool  @relation(fields: [fieldPoolId], references: [id])

  @@id([fieldPoolId, departmentId])
  @@map("field_pool_department")
}

model FieldPoolDomain {
  fieldPoolId String @map("field_pool_id")
  domainId    String @map("domain_id")

  Domain    Domain    @relation(fields: [domainId], references: [id])
  FieldPool FieldPool @relation(fields: [fieldPoolId], references: [id])

  @@id([fieldPoolId, domainId])
  @@map("field_pool_domain")
}

model Domain {
  id          String  @id @default(uuid())
  name        String  @unique @map("name")
  description String? @map("description")

  FieldPoolDomains FieldPoolDomain[] @relation
  ProjectDomains   ProjectDomain[]   @relation

  @@map("domain")
}

// --------------------------- REGISTER MANAGEMENT ------------------------

enum LecturerSelectionStatusT {
  REQUESTED_CHANGES
  PENDING
  APPROVED
  REJECTED
  CONFIRMED
}

model LecturerSelection {
  id              String                   @id @default(uuid()) @map("id")
  priority        Int                      @default(1)
  topicTitle      String                   @map("topic_title")
  description     String?                  @map("description")
  capacity        Int                      @default(1) @map("capacity")
  currentCapacity Int                      @default(0) @map("current_capacity")
  status          LecturerSelectionStatusT @default(PENDING) @map("status")
  isActive        Boolean                  @default(true) @map("is_active")
  lecturerId      String                   @map("lecturer_id")
  fieldPoolId     String?                  @map("field_pool_id")
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @updatedAt @map("updated_at")
  version         Int                      @default(1)

  Lecturer  Faculty    @relation(fields: [lecturerId], references: [id])
  FieldPool FieldPool? @relation(fields: [fieldPoolId], references: [id])

  @@unique([lecturerId, topicTitle, fieldPoolId])
  @@map("lecturer_selection")
}

enum StudentSelectionStatusT {
  REQUESTED_CHANGES
  PENDING
  APPROVED
  REJECTED
  CONFIRMED
}

model StudentSelection {
  id                  String                  @id @default(uuid()) @map("id")
  priority            Int                     @default(1) @map("priority")
  topicTitle          String?                 @map("topic_title")
  description         String?                 @map("description")
  status              StudentSelectionStatusT @default(PENDING) @map("status")
  createdAt           DateTime                @default(now()) @map("created_at")
  updatedAt           DateTime                @updatedAt @map("updated_at")
  studentId           String                  @map("student_id")
  lecturerId          String?                 @map("lecturer_id")
  fieldPoolId         String?                 @map("field_pool_id")
  preferredAt         DateTime                @default(now()) @map("preferred_at")
  approvedByFacultyId String?                 @map("approved_by_faculty_id")
  version             Int                     @default(1)

  PreferredLecturer Faculty?   @relation("LecturerSelectedByStudent", fields: [lecturerId], references: [id])
  Student           Student    @relation(fields: [studentId], references: [id])
  FieldPool         FieldPool? @relation(fields: [fieldPoolId], references: [id])
  ApprovedByFaculty Faculty?   @relation("ApprovedStudentSelection", fields: [approvedByFacultyId], references: [id])

  @@unique([studentId, fieldPoolId, priority])
  @@unique([studentId, fieldPoolId, lecturerId])
  @@index([studentId, priority])
  @@index([lecturerId, createdAt, status])
  @@map("student_selection")
}

model ProjectAllocation {
  id          String   @id @default(uuid())
  topicTitle  String   @map("topic_title")
  allocatedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studentId   String   @map("student_id")
  createdById String   @map("created_by_id") // Faculty who created this allocation
  lecturerId  String   @map("lecturer_id") // The assigned lecturer (advisor)
  version     Int      @default(1)

  Student          Student          @relation(fields: [studentId], references: [id])
  Lecturer         Faculty          @relation("ProjectAllocationSelectedByLecturer", fields: [lecturerId], references: [id])
  CreatedByFaculty Faculty          @relation("ProjectAllocationCreatedByFaculty", fields: [createdById], references: [id])
  ProposedProject  ProposedProject?

  @@unique([studentId, lecturerId, topicTitle])
  @@index([studentId, lecturerId, allocatedAt])
  @@map("project_allocation")
}

// --------------------------- REGISTER PROJECT ------------------------

enum ProposedProjectStatusT {
  // review topic by advisor
  TOPIC_SUBMISSION_PENDING
  TOPIC_PENDING_ADVISOR
  TOPIC_REQUESTED_CHANGES
  TOPIC_APPROVED
  // review outline by advisor
  OUTLINE_PENDING_SUBMISSION
  OUTLINE_PENDING_ADVISOR
  OUTLINE_REQUESTED_CHANGES
  OUTLINE_REJECTED
  OUTLINE_APPROVED
  // review final by head
  PENDING_HEAD
  REQUESTED_CHANGES_HEAD
  REJECTED_BY_HEAD
  APPROVED_BY_HEAD
}

model ProposedProject {
  id                  String                 @id @default(cuid())
  projectAllocationId String?                @unique @map("project_allocation_id")
  title               String                 @map("title")
  description         String?                @map("description")
  status              ProposedProjectStatusT @default(TOPIC_SUBMISSION_PENDING) @map("status")
  createdAt           DateTime               @default(now()) @map("created_at")
  updatedAt           DateTime               @updatedAt @map("updated_at")
  proposalDeadline    DateTime?              @map("proposal_deadline")
  topicLockDate       DateTime?              @map("topic_lock_date")
  approvedAt          DateTime?              @map("approved_at")
  approvedById        String?                @map("approved_by_id")
  createdByStudentId  String?                @map("created_by_student_id")
  createdByFacultyId  String?                @map("created_by_faculty_id")
  fieldPoolId         String?                @map("field_pool_id")
  version             Int                    @default(1)

  ProjectAllocation       ProjectAllocation?       @relation(fields: [projectAllocationId], references: [id], onDelete: SetNull)
  CreatedByStudent        Student?                 @relation("ProposedProjectCreatedByStudent", fields: [createdByStudentId], references: [id])
  CreatedByFaculty        Faculty?                 @relation("ProposedProjectCreatedByFaculty", fields: [createdByFacultyId], references: [id])
  ProposalOutline         ProposalOutline?         @relation(fields: [proposalOutlineId], references: [id])
  ApprovedBy              Faculty?                 @relation("ProposedProjectApprovedByFaculty", fields: [approvedById], references: [id])
  ProposedProjectComments ProposedProjectComment[] @relation
  FieldPool               FieldPool?               @relation(fields: [fieldPoolId], references: [id])
  ProposedProjectMember   ProposedProjectMember[]
  proposalOutlineId       String?

  @@map("proposed_project")
}

// Enum mới cho trạng thái thành viên đề xuất
enum ProposedProjectMemberStatusT {
  ACTIVE // Thành viên đang hoạt động trong nhóm đề xuất
  REMOVED // Thành viên đã bị loại bỏ khỏi nhóm đề xuất
}

model ProposedProjectMember {
  id                String                       @id @default(uuid())
  proposedProjectId String                       @map("proposed_project_id")
  studentId         String?                      @map("student_id")
  facultyId         String?                      @map("faculty_id")
  role              String?                      @map("role")
  status            ProposedProjectMemberStatusT @default(ACTIVE) @map("status")
  assignedAt        DateTime                     @default(now()) @map("assigned_at")

  ProposedProject ProposedProject @relation(fields: [proposedProjectId], references: [id], onDelete: Cascade)
  Student         Student?        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  Faculty         Faculty?        @relation(fields: [facultyId], references: [id], onDelete: Cascade)

  @@map("proposed_project_member")
}

model ProposedProjectComment {
  id                 String   @id @default(cuid())
  commenterStudentId String?  @map("commenter_student_id")
  commenterFacultyId String?  @map("commenter_faculty_id")
  content            String   @map("content")
  createdAt          DateTime @default(now()) @map("created_at")
  proposedProjectId  String   @map("proposed_project_id")

  ProposedProject  ProposedProject @relation(fields: [proposedProjectId], references: [id])
  CommenterStudent Student?        @relation(fields: [commenterStudentId], references: [id])
  CommenterFaculty Faculty?        @relation(fields: [commenterFacultyId], references: [id])

  @@map("proposed_project_comment")
}

enum ProposalStatusT {
  DRAFT
  PENDING_REVIEW
  REQUESTED_CHANGES
  APPROVED
  REJECTED
  LOCKED
}

model ProposalOutline {
  id              String          @id @default(cuid())
  introduction    String          @map("introduction")
  objectives      String          @map("objectives")
  methodology     String          @map("methodology")
  expectedResults String          @map("expected_results")
  fileId          String?         @unique @map("file_id")
  status          ProposalStatusT @default(DRAFT) @map("status")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  version         Int             @default(1)
  projectId       String?         @unique @map("project_id")

  File            File?             @relation(fields: [fileId], references: [id])
  Project         Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ProposedProject ProposedProject[]

  @@map("proposal_outline")
}

// --------------------------- PROJECT MANAGEMENT ------------------------

enum ProjectStatusT {
  IN_PROGRESS
  WAITING_FOR_EVALUATION
  COMPLETED
  ON_HOLD
  CANCELLED
}

model Project {
  id               String         @id @default(cuid())
  type             ProjectT       @map("type")
  title            String         @map("title")
  description      String?        @map("description")
  field            String         @map("field")
  status           ProjectStatusT @default(IN_PROGRESS) @map("status")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  proposalDeadline DateTime?      @map("proposal_deadline")
  topicLockDate    DateTime?      @map("topic_lock_date")
  customFields     Json?          @map("custom_fields")
  approvedById     String         @map("approved_by_id")
  departmentId     String?        @map("department_id")
  fieldPoolId      String?        @map("field_pool_id")
  version          Int            @default(1)

  Department         Department?          @relation(fields: [departmentId], references: [id])
  ApprovedBy         Faculty?             @relation("ApprovedByFaculty", fields: [approvedById], references: [id])
  ProposalOutline    ProposalOutline?     @relation
  Members            ProjectMember[]      @relation
  ProjectComments    ProjectComment[]     @relation
  ProjectEvaluation  ProjectEvaluation?   @relation
  DefenseCommittee   DefenseCommittee?    @relation
  ProjectFinalReport ProjectFinalReport[] @relation
  FieldPool          FieldPool?           @relation(fields: [fieldPoolId], references: [id])
  ProjectDomains     ProjectDomain[]      @relation

  @@index([type, status, departmentId, createdAt])
  @@index([approvedById, status, createdAt])
  @@index([departmentId, type, status])
  @@map("project")
}

enum ProjectMemberStatusT {
  ACTIVE
  REMOVED
}

model ProjectMember {
  id              String               @id @default(cuid())
  projectId       String               @map("project_id")
  memberStudentId String?              @map("member_student_id")
  memberFacultyId String?              @map("member_faculty_id")
  role            String?              @map("role_description")
  status          ProjectMemberStatusT @default(ACTIVE)
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  version         Int                  @default(1)

  Project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  MemberStudent Student? @relation("MemberStudent", fields: [memberStudentId], references: [id])
  MemberFaculty Faculty? @relation("MemberFaculty", fields: [memberFacultyId], references: [id])

  @@unique([projectId, memberStudentId])
  @@unique([projectId, memberFacultyId])
  @@index([projectId])
  @@index([memberStudentId])
  @@index([memberFacultyId])
  @@map("project_member")
}

model ProjectComment {
  id                 String   @id @default(cuid())
  content            String   @map("content")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  projectId          String   @map("project_id")
  commenterStudentId String?  @map("commenter_student_id")
  commenterFacultyId String?  @map("commenter_faculty_id")

  Project          Project  @relation(fields: [projectId], references: [id])
  CommenterStudent Student? @relation("CommenterStudent", fields: [commenterStudentId], references: [id])
  CommenterFaculty Faculty? @relation("CommenterFaculty", fields: [commenterFacultyId], references: [id])

  @@index([projectId, createdAt])
  @@index([commenterStudentId])
  @@index([commenterFacultyId])
  @@map("project_comment")
}

model ProjectDomain {
  projectId String @map("project_id")
  domainId  String @map("domain_id")

  Project Project @relation(fields: [projectId], references: [id])
  Domain  Domain  @relation(fields: [domainId], references: [id])

  @@id([projectId, domainId])
  @@map("project_domain")
}

// ------------------------- PROJECT DEFENSE MANAGEMENT ------------------------

model ProjectFinalReport {
  id               String   @id @default(cuid())
  projectId        String   @map("project_id")
  mainReportFileId String?  @unique @map("main_report_file_id")
  submittedAt      DateTime @default(now()) @map("submitted_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  version          Int      @default(1)
  studentId        String? // Student associated with this report submission
  facultyId        String? // Faculty (advisor) associated with this report submission

  Project               Project                @relation(fields: [projectId], references: [id])
  MainReportFile        File?                  @relation("MainReportFile", fields: [mainReportFileId], references: [id])
  Attachments           ReportAttachment[]     @relation
  ProjectReportComments ProjectReportComment[] @relation
  Student               Student?               @relation("ReportByStudent", fields: [studentId], references: [id])
  Faculty               Faculty?               @relation("ReportByFaculty", fields: [facultyId], references: [id])

  @@index([projectId])
  @@map("project_final_report")
}

model ReportAttachment {
  id          String   @id @default(uuid())
  reportId    String   @map("report_id")
  fileId      String   @map("file_id")
  description String?  @map("description")
  addedAt     DateTime @default(now())

  ProjectFinalReport ProjectFinalReport @relation(fields: [reportId], references: [id])
  File               File               @relation(fields: [fileId], references: [id])

  @@unique([reportId, fileId])
  @@index([reportId])
  @@index([fileId])
  @@map("report_attachment")
}

model ProjectReportComment {
  id                 String   @id @default(cuid())
  finalReportId      String   @map("final_report_id")
  commenterStudentId String?  @map("commenter_student_id")
  commenterFacultyId String?  @map("commenter_faculty_id")
  content            String   @map("content")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  version            Int      @default(1)

  FinalReport      ProjectFinalReport @relation(fields: [finalReportId], references: [id])
  CommenterStudent Student?           @relation("ReportCommenterStudent", fields: [commenterStudentId], references: [id])
  CommenterFaculty Faculty?           @relation("ReportCommenterFaculty", fields: [commenterFacultyId], references: [id])

  @@index([finalReportId])
  @@map("project_report_comment")
}

enum DefenseCommitteeStatusT {
  PREPARING
  SCHEDULED
  ONGOING
  FINISHED
  CANCELLED
}

model DefenseCommittee {
  id          String                  @id @default(cuid())
  projectId   String                  @unique @map("project_id")
  name        String                  @map("name")
  description String?                 @map("description")
  defenseDate DateTime                @map("defense_date")
  location    String?                 @map("location")
  status      DefenseCommitteeStatusT @default(PREPARING) @map("status")
  createdAt   DateTime                @default(now()) @map("created_at")
  updatedAt   DateTime                @updatedAt @map("updated_at")
  createdById String                  @map("created_by_id") // Faculty ID
  version     Int                     @default(1)

  Project          Project         @relation(fields: [projectId], references: [id])
  Members          DefenseMember[] @relation
  CreatedByFaculty Faculty         @relation("CreatedByFaculty", fields: [createdById], references: [id])

  @@index([defenseDate])
  @@index([projectId])
  @@map("defense_committee")
}

enum DefenseCommitteeRoleT {
  CHAIRMAN
  SECRETARY
  REVIEWER
  MEMBER
}

model DefenseMember {
  id                 String                @id @default(cuid())
  role               DefenseCommitteeRoleT @map("role")
  defenseCommitteeId String                @map("defense_committee_id")
  facultyMemberId    String                @map("faculty_member_id")
  version            Int                   @default(1)

  DefenseCommittee DefenseCommittee @relation(fields: [defenseCommitteeId], references: [id])
  FacultyMember    Faculty          @relation(fields: [facultyMemberId], references: [id])

  @@unique([defenseCommitteeId, facultyMemberId])
  @@map("defense_committee_member")
}

// --------------------------- PROJECT EVALUATION RESULT ------------------------

enum ProjectEvaluationStatusT {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model ProjectEvaluation {
  id                    String                   @id @default(uuid())
  projectId             String                   @unique @map("project_id")
  finalScore            Float?                   @map("final_score") // Calculated in service layer
  grade                 String?                  @map("grade")
  status                ProjectEvaluationStatusT @default(PENDING) @map("status")
  evaluatedById         String?                  @map("evaluated_by_id") // Faculty ID
  advisorScore          Float?                   @map("advisor_score")
  committeeAverageScore Float?                   @map("committee_average_score")
  advisorWeight         Float?                   @default(0.5) @map("advisor_weight")
  committeeWeight       Float?                   @default(0.5) @map("committee_weight")
  createdAt             DateTime                 @default(now()) @map("created_at")
  updatedAt             DateTime                 @updatedAt @map("updated_at")
  version               Int                      @default(1)

  CriteriaScores     ProjectCriteriaScore[] @relation
  Project            Project                @relation(fields: [projectId], references: [id])
  EvaluatedByFaculty Faculty?               @relation("EvaluatedByFaculty", fields: [evaluatedById], references: [id])

  @@map("project_evaluation")
}

model ProjectCriteriaScore {
  id           String  @id @default(uuid())
  evaluationId String  @map("evaluation_id")
  criteriaId   String  @map("criteria_id")
  evaluatorId  String  @map("evaluator_id") // Faculty ID
  score        Float   @default(0.0) @map("score")
  comment      String? @map("comment")
  version      Int     @default(1)

  EvaluationCriteria EvaluationCriteria @relation(fields: [criteriaId], references: [id])
  ProjectEvaluation  ProjectEvaluation  @relation(fields: [evaluationId], references: [id])
  Evaluator          Faculty            @relation(fields: [evaluatorId], references: [id])

  @@unique([evaluationId, criteriaId, evaluatorId])
  @@map("project_criteria_score")
}

model EvaluationCriteria {
  id          String   @id @default(uuid())
  name        String   @unique @map("name")
  description String?  @map("description")
  weight      Float    @default(1.0) @map("weight")
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdById String   @map("created_by_id") // Faculty ID
  version     Int      @default(1)

  CreatedByFaculty     Faculty                @relation(fields: [createdById], references: [id])
  ProjectCriteriaScore ProjectCriteriaScore[] @relation

  @@map("evaluation_criteria")
}

// --------------------------- FILE MANAGEMENT ------------------------

enum FileT {
  PDF
  WORD
  PRESENTATION
  SPREADSHEET
  AUTOCAD
  IMAGE
  VIDEO
  CODE
  DATASET
  OTHER
}

model File {
  id                  String    @id @default(uuid())
  fileName            String    @map("file_name")
  originalName        String    @map("original_name")
  fileUrl             String?   @map("file_url")
  filePath            String?   @map("file_path")
  fileType            FileT     @map("file_type")
  mimeType            String    @map("mime_type")
  fileSize            Int       @map("file_size")
  checksum            String?   @map("checksum")
  uploadedByStudentId String?   @map("uploaded_by_student_id")
  uploadedByFacultyId String?   @map("uploaded_by_faculty_id")
  uploadedAt          DateTime  @default(now())
  lastAccessed        DateTime? @map("last_accessed")
  isPublic            Boolean   @default(false)
  isArchived          Boolean   @default(false)
  metadata            Json?

  ProposalOutlines  ProposalOutline[]   @relation
  MainReportFor     ProjectFinalReport? @relation("MainReportFile")
  ReportAttachments ReportAttachment[]  @relation

  UploadedByStudent Student? @relation("UploadedByStudent", fields: [uploadedByStudentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  UploadedByFaculty Faculty? @relation("UploadedByFaculty", fields: [uploadedByFacultyId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([fileType, uploadedAt])
  @@index([uploadedByStudentId])
  @@index([uploadedByFacultyId])
  @@map("file")
}

// --------------------------- LOG SYSTEM ------------------------

model AuditLog {
  id                String   @id @default(uuid())
  entityType        String   @map("entity_type")
  entityId          String?  @map("entity_id")
  action            String   @map("action")
  oldValue          Json?    @map("old_value")
  newValue          Json?    @map("new_value")
  metadata          Json?    @map("metadata")
  createdAt         DateTime @default(now()) @map("created_at")
  departmentId      String?  @map("department_id")
  actionByStudentId String?  @map("action_by_student_id")
  actionByFacultyId String?  @map("action_by_faculty_id")

  Department      Department? @relation(fields: [departmentId], references: [id])
  ActionByStudent Student?    @relation("ActionByStudent", fields: [actionByStudentId], references: [id])
  ActionByFaculty Faculty?    @relation("ActionByFaculty", fields: [actionByFacultyId], references: [id])

  @@index([entityType, entityId, createdAt])
  @@index([actionByStudentId])
  @@index([actionByFacultyId])
  @@index([action, createdAt])
  @@map("audit_log")
}

// --------------------------- NOTIFICATION SYSTEM ------------------------

enum NotificationType {
  INFO
  WARNING
  DEADLINE
  TASK_ASSIGNED
  COMMENT_MENTION
  PROPOSAL_STATUS_CHANGE
  OUTLINE_STATUS_CHANGE
  REPORT_STATUS_CHANGE
  REVISION_REQUEST
  GRADE_AVAILABLE
  MEETING_SCHEDULED
  SYSTEM_UPDATE
  CUSTOM
}

model Notification {
  id                 String           @id @default(uuid())
  recipientStudentId String?          @map("recipient_student_id")
  recipientFacultyId String?          @map("recipient_faculty_id")
  senderStudentId    String?          @map("sender_student_id")
  senderFacultyId    String?          @map("sender_faculty_id") // Can be null for system notifications
  type               NotificationType @map("type")
  title              String           @map("title")
  message            String           @map("message")
  relatedEntityType  String?          @map("related_entity_type")
  relatedEntityId    String?          @map("related_entity_id")
  isRead             Boolean          @default(false) @map("is_read")
  readAt             DateTime?        @map("read_at")
  createdAt          DateTime         @default(now()) @map("created_at")

  RecipientStudent Student? @relation("StudentNotifications", fields: [recipientStudentId], references: [id], onDelete: Cascade)
  RecipientFaculty Faculty? @relation("FacultyNotifications", fields: [recipientFacultyId], references: [id], onDelete: Cascade)
  SenderStudent    Student? @relation("StudentSentNotifications", fields: [senderStudentId], references: [id], onDelete: SetNull)
  SenderFaculty    Faculty? @relation("FacultySentNotifications", fields: [senderFacultyId], references: [id], onDelete: SetNull)

  @@index([recipientStudentId, isRead, createdAt])
  @@index([recipientFacultyId, isRead, createdAt])
  @@map("notification")
}
